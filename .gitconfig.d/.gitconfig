[include]
    # store user.name and user.email here
    path = ~/.gitconfig.local
[alias]
    # show list of all configured aliases
	alias = !git config -l | grep alias | cut -c 7- | sort

    #######################
    # shortened commands
    ########################
	br = branch
	co = checkout
	cob = checkout -b
	cp = cherry-pick
	ci = commit
	st = status
	sts = status -s

    # run git command over all subdirectories
    all = "!f() { find $(git config --get project.checkout-dir) -name '.git' -type d | rev | cut -c6- | rev |  xargs -P10 -I{} git -C {} $@ ; }; f"
    all-here = "!f() { find . -name '.git' -type d | rev | cut -c6- | rev |  xargs -P10 -I{} git -C {} $@ ; }; f"
    #all = "!f() { find ~/git-checkouts -name '.git' -type d | sed 's/\/.git//' |  xargs -P10 -I{} git -C {} $1; }; f"

    # remove remote branch references that no longer exist, cleanup unnecessary git files, remove untracked files from the working tree and clear out your stash
	cleanup = !git remote prune origin && git gc && git clean -dfx && git stash clear

    # view list of files staged for the next commit
	staged = diff --cached

    # Unstage any files that have been added to the staging area
	unstage = reset HEAD --
    undo-commit = reset --soft HEAD~1
    undo-commit-hard = reset HEAD --hard
    
    # view list of files to be pushed to remote
    topush = !git diff --stat --cached origin/master
    topushdiff = !git diff --cached origin/master

    #######################
    # diff files
    ########################
    # show diff of specific commit
    diffcommit = "!f() { git difftool --dir $1^..$1; }; f"
    dc = !git diffcommit
    # show directory changes
    diffd = difftool -d
    # show diff of files that are staged
    diffstaged = difftool -d --staged
    # show diff of stashed files
    stashview = "!f() { git difftool -d stash@{$1}^..stash@{$1}; }; f"

    #######################
    # branches
    ########################
	new-task = !git fetch origin --prune && git co master && git merge origin/master && git checkout -b
    # get working copy up to date with origin - run in feature branch regularly
    update = "!f() { git pull --rebase --prune origin ${1-master}; }; f"

    # print name of current working branch
	current-branch = symbolic-ref --short HEAD
    #previous-branch = "!f() { git reflog | sed -n 's/.*checkout: moving from .* to \(.*\)/\1/p' | sed '2q;d' ; }; f"
    # print the name of the current upstream tracking branch
	upstream = !git config --get branch.$(git current-branch).remote || echo origin
    # push the current branch to the remote "origin", and set it to track the upstream branch
	publish = !git push -u origin $(git current-branch)
    # delete the remote version of the current branch
	unpublish = !git push origin :$(git current-branch)
    # delete every branch that been merged into master (except master)
	branch-clean = "!f() { git branch --merged ${1-master} | grep -v ${1-master}$ | xargs git branch -d; }; f"
    # switch to master, bring master up to speed with origin, delete all local brances already merged into master
	branch-done = "!f() { git checkout ${1-master} && git update ${1-master} && git branch-clean ${1-master}; }; f"
  
    #######################
    # history
    ########################
    # show last N (default = 1) commits
	last = "!f() { git log --pretty=format:'%C(red)%h %Cgreen%ad%C(yellow)%d %Creset%s%C(bold blue) [%cn]%Creset' --decorate --date=short --no-merges -${1-1} HEAD; }; f"
    # show my last 10 commits
    mylast = "!f() { git log --author=\"$(git config --get user.name)\" --oneline --no-merges -${1-10}; }; f"
	brieflog = log --graph --abbrev-commit --decorate
	visual = !gitk
	blog = !git brieflog
    # grep history for keyword
    glog = "!f() { git log --oneline --reverse --pretty=\"%C(red)%h %Cgreen%ad%C(yellow)%d %Creset%s%C(bold blue) [%cn]%Creset\" --decorate --perl-regexp -i --date=short --grep=$1; }; f"
	ll = !git log --graph --oneline --decorate --date=relative --all
	ld = log --pretty=format:'%C(red)%h %Cgreen%ad%C(yellow)%d %Creset%s%C(bold blue) [%cn]%Creset' --decorate --date=short
	tree = log --graph --full-history --all --color --date=short --pretty=format:\"%Cred%x09%h %Creset%ad%Cgreen%d %Creset %s %C(bold)(%an)%Creset\"
	who = shortlog -s --
	ls = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)[%an]%Creset' --abbrev-commit --date=relative

[core]
	excludesfile = ~/.dotfiles/.gitconfig.d/.gitignore

[fetch]
	prune = true

[pull]
	rebase = true
